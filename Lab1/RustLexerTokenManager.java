/* Generated By:JavaCC: Do not edit this line. RustLexerTokenManager.java */
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

/** Token Manager. */
public class RustLexerTokenManager implements RustLexerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xf9fffe7ffff43fe0L) != 0L || (active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 120;
            return 218;
         }
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 120;
            return 5;
         }
         if ((active1 & 0x7800000000L) != 0L)
            return 65;
         if ((active0 & 0x600000000080000L) != 0L)
         {
            jjmatchedKind = 120;
            return 179;
         }
         if ((active1 & 0x100080L) != 0L)
            return 163;
         if ((active1 & 0x400000000L) != 0L)
            return 219;
         return -1;
      case 1:
         if ((active0 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 203;
         }
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xf7dfffff57f00000L) != 0L || (active1 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 218;
         }
         if ((active0 & 0x8200000a8040000L) != 0L)
            return 218;
         return -1;
      case 2:
         if ((active0 & 0xf37bff1647f80000L) != 0L || (active1 & 0xfL) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 2;
            return 218;
         }
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x48400e910000000L) != 0L)
            return 218;
         return -1;
      case 3:
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x737a790406780000L) != 0L || (active1 & 0xeL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 218;
         }
         if ((active0 & 0x8001861241800000L) != 0L || (active1 & 0x1L) != 0L)
            return 218;
         return -1;
      case 4:
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x4302190002200000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
            return 218;
         }
         if ((active0 & 0x3078600404580000L) != 0L || (active1 & 0x8L) != 0L)
            return 218;
         return -1;
      case 5:
         if ((active0 & 0x4100000000200000L) != 0L || (active1 & 0x6L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
            return 218;
         }
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x202190002000000L) != 0L || (active1 & 0x1L) != 0L)
            return 218;
         return -1;
      case 6:
         if ((active0 & 0x4100000000200000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 218;
         }
         if ((active1 & 0x6L) != 0L)
            return 218;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 35:
         return jjStopAtPos(0, 109);
      case 36:
         return jjStopAtPos(0, 110);
      case 37:
         return jjStopAtPos(0, 72);
      case 38:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402000L);
      case 40:
         return jjStopAtPos(0, 115);
      case 41:
         return jjStopAtPos(0, 116);
      case 42:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 43:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 44:
         return jjStopAtPos(0, 103);
      case 45:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000040000L);
      case 46:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000000L);
      case 47:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 58:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 59:
         return jjStopAtPos(0, 104);
      case 60:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41008000L);
      case 61:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100008000000L);
      case 62:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x102010000L);
      case 63:
         return jjStopAtPos(0, 111);
      case 64:
         return jjStopAtPos(0, 97);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x3fe0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 117);
      case 93:
         return jjStopAtPos(0, 118);
      case 94:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 95:
         return jjStartNfaWithStates_0(0, 98, 219);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x160000000040000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x600000000080000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x880000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000001c000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe0000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x300000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000003c00000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000004000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3a0000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000L, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x6000000000000L, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x18000000000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 123:
         return jjStopAtPos(0, 113);
      case 124:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x804000L);
      case 125:
         return jjStopAtPos(0, 114);
      case 126:
         return jjStopAtPos(0, 112);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fe0L, active1, 0L);
      case 46:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000000000L);
      case 58:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 60:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L);
      case 61:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 62:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000404000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200078100000000L, active1, 0L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 218);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0xcL);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 218);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 218);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001000000L, active1, 0x2L);
      case 111:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 218);
         return jjMoveStringLiteralDfa2_0(active0, 0x400001a10300000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000c00000480000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x24000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x206000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x81000000000000L, active1, 0x1L);
      case 124:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      case 48:
         return jjMoveStringLiteralDfa3_0(active0, 0x24e0L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0x1b00L, active1, 0L);
      case 61:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 89);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40480000400000L, active1, 0L);
      case 98:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 218);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 218);
         break;
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 218);
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000000080000L, active1, 0x8L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 218);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x60004000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 218);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000300000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200040000000L, active1, 0x1L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 218);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x102000000800000L, active1, 0x2L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 218);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 218);
         return jjMoveStringLiteralDfa3_0(active0, 0x10402000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800001000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 218);
         break;
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa4_0(active0, 0x3fe0L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002000000080000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 218);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 218);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 218);
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200002000000L, active1, 0x1L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 218);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 218);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40400000000000L, active1, 0x2L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 218);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x8L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 218);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 218);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x6008000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000600000L, active1, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000000L, active1, 0L);
      case 118:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 218);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa5_0(active0, 0x3e0L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c00L, active1, 0L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 218);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 218);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 218);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 218);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 218);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 218);
         break;
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 218);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000200000L, active1, 0L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 218);
         break;
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 218);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 218);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 218);
         return jjMoveStringLiteralDfa5_0(active0, 0x4100010002000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 218);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 218);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 218);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         break;
      case 53:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      case 56:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         break;
      case 57:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 66:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         break;
      case 67:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         break;
      case 68:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         break;
      case 69:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 70:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x4L);
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 218);
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 218);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 218);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 218);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 218);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 218);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 218);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 218);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 218);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 218);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 218);
         break;
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 218);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 218;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 203:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 35)
                     jjAddStates(0, 1);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(204, 205);
                  else if (curChar == 33)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(2, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 33)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  if (curChar == 35)
                     jjAddStates(6, 7);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 16);
                  else if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 39)
                     jjAddStates(20, 21);
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 145)
                        kind = 145;
                     jjCheckNAddStates(25, 28);
                  }
                  else if (curChar == 48)
                     jjAddStates(29, 34);
                  if (curChar == 48)
                  {
                     if (kind > 145)
                        kind = 145;
                     jjCheckNAddTwoStates(38, 52);
                  }
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(35, 37);
                  else if (curChar == 39)
                     jjAddStates(38, 39);
                  else if (curChar == 33)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  break;
               case 219:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(4, 2);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 163:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 174;
                  else if (curChar == 42)
                     jjCheckNAddStates(40, 42);
                  if (curChar == 47)
                     jjAddStates(43, 44);
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 33 && kind > 120)
                     kind = 120;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(4, 2);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 24);
                  break;
               case 13:
                  jjCheckNAddStates(22, 24);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 15:
                  if (curChar == 34 && kind > 130)
                     kind = 130;
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar != 34)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAddTwoStates(20, 22);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar == 35)
                     jjCheckNAddStates(2, 5);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(25, 28);
                  break;
               case 28:
                  if (curChar != 35)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAddTwoStates(20, 22);
                  break;
               case 29:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(29, 28);
                  break;
               case 32:
                  if (curChar == 39)
                     jjAddStates(20, 21);
                  break;
               case 34:
                  if ((0x1008000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if (curChar == 39 && kind > 140)
                     kind = 140;
                  break;
               case 36:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar != 48)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddTwoStates(38, 52);
                  break;
               case 39:
                  if (curChar == 56 && kind > 145)
                     kind = 145;
                  break;
               case 40:
                  if (curChar == 54 && kind > 145)
                     kind = 145;
                  break;
               case 41:
               case 53:
               case 100:
               case 109:
               case 122:
               case 131:
               case 144:
               case 153:
                  if (curChar == 49)
                     jjCheckNAdd(40);
                  break;
               case 42:
                  if (curChar == 50 && kind > 145)
                     kind = 145;
                  break;
               case 43:
               case 54:
               case 101:
               case 110:
               case 123:
               case 132:
               case 145:
               case 154:
                  if (curChar == 51)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if (curChar == 52 && kind > 145)
                     kind = 145;
                  break;
               case 45:
               case 55:
               case 102:
               case 111:
               case 124:
               case 133:
               case 146:
               case 155:
                  if (curChar == 54)
                     jjCheckNAdd(44);
                  break;
               case 46:
               case 56:
               case 103:
               case 112:
               case 125:
               case 134:
               case 147:
               case 156:
                  if (curChar == 50)
                     jjCheckNAdd(39);
                  break;
               case 47:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 57:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 61:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(25, 28);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(25, 28);
                  break;
               case 64:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(45, 48);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(49, 52);
                  break;
               case 69:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(53, 55);
                  break;
               case 73:
                  if (curChar == 50 && kind > 148)
                     kind = 148;
                  break;
               case 74:
               case 91:
                  if (curChar == 51)
                     jjCheckNAdd(73);
                  break;
               case 75:
                  if (curChar == 52 && kind > 148)
                     kind = 148;
                  break;
               case 76:
               case 92:
                  if (curChar == 54)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(56, 60);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 16);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 83:
                  if (curChar != 46)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(68, 72);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(70, 72);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(73, 76);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(77, 80);
                  break;
               case 95:
                  if (curChar == 48)
                     jjAddStates(29, 34);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(81, 84);
                  break;
               case 104:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 113:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 119:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(85, 88);
                  break;
               case 126:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 135:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 141:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(89, 92);
                  break;
               case 148:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 157:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 162:
                  if (curChar == 47)
                     jjCheckNAddStates(17, 19);
                  break;
               case 164:
                  if ((0xffff7ffdfffffbffL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(165);
                  break;
               case 165:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(165);
                  break;
               case 166:
                  if (curChar != 47)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(165);
                  break;
               case 167:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 42)
                     jjCheckNAddStates(40, 42);
                  break;
               case 169:
                  if ((0xfffffbfdffffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 170:
                  if (curChar == 10)
                     jjCheckNAddStates(40, 42);
                  break;
               case 171:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(168, 173);
                  break;
               case 173:
                  if (curChar == 47 && kind > 124)
                     kind = 124;
                  break;
               case 174:
                  if (curChar != 47)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 175:
                  if ((0xffff7fffffffffffL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(176);
                  break;
               case 176:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(176);
                  break;
               case 177:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 180:
                  jjCheckNAdd(181);
                  break;
               case 181:
                  if (curChar != 39)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjAddStates(93, 94);
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(181);
                  break;
               case 190:
                  if (curChar == 34)
                     jjCheckNAddStates(35, 37);
                  break;
               case 191:
                  jjCheckNAddStates(35, 37);
                  break;
               case 192:
                  if (curChar != 34)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjAddStates(95, 96);
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 10)
                     jjCheckNAddStates(35, 37);
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 204:
                  jjCheckNAddTwoStates(204, 205);
                  break;
               case 205:
                  if (curChar != 34)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAddTwoStates(206, 208);
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 210:
                  if (curChar == 35)
                     jjAddStates(0, 1);
                  break;
               case 211:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(212, 213);
                  break;
               case 212:
                  jjCheckNAddTwoStates(212, 213);
                  break;
               case 213:
               case 217:
                  if (curChar == 34)
                     jjCheckNAdd(214);
                  break;
               case 214:
                  if (curChar != 35)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAddTwoStates(206, 208);
                  break;
               case 215:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(216, 217);
                  break;
               case 216:
                  jjCheckNAddTwoStates(216, 217);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 203:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  if (curChar == 98)
                     jjAddStates(97, 99);
                  else if (curChar == 114)
                     jjAddStates(100, 101);
                  else if (curChar == 95)
                     jjCheckNAdd(4);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 179:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  if (curChar == 114)
                     jjAddStates(102, 103);
                  break;
               case 219:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(4, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 218:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 95)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(4, 2);
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 95)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  jjCheckNAddStates(22, 24);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 16:
                  if (curChar == 114)
                     jjAddStates(100, 101);
                  break;
               case 18:
                  jjAddStates(104, 105);
                  break;
               case 20:
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 95)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(23);
                  break;
               case 26:
                  jjAddStates(106, 107);
                  break;
               case 30:
                  jjAddStates(108, 109);
                  break;
               case 33:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x14400010000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 38:
                  if (curChar == 105)
                     jjCheckNAddStates(110, 115);
                  break;
               case 48:
                  if (curChar == 101 && kind > 145)
                     kind = 145;
                  break;
               case 49:
               case 58:
               case 105:
               case 114:
               case 127:
               case 136:
               case 149:
               case 158:
                  if (curChar == 122)
                     jjCheckNAdd(48);
                  break;
               case 50:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 117)
                     jjCheckNAddStates(116, 121);
                  break;
               case 59:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if (curChar == 95)
                     jjCheckNAdd(70);
                  break;
               case 72:
                  if (curChar == 102)
                     jjAddStates(122, 123);
                  break;
               case 79:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 81:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 89:
                  if (curChar == 95)
                     jjCheckNAdd(88);
                  break;
               case 90:
                  if (curChar == 102)
                     jjAddStates(124, 125);
                  break;
               case 96:
                  if (curChar == 120)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddStates(81, 84);
                  break;
               case 98:
                  if (curChar == 95)
                     jjCheckNAdd(97);
                  break;
               case 99:
                  if (curChar == 105)
                     jjCheckNAddStates(126, 131);
                  break;
               case 106:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 117)
                     jjCheckNAddStates(132, 137);
                  break;
               case 115:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 88)
                     jjCheckNAdd(97);
                  break;
               case 118:
                  if (curChar == 111)
                     jjCheckNAdd(119);
                  break;
               case 120:
                  if (curChar == 95)
                     jjCheckNAdd(119);
                  break;
               case 121:
                  if (curChar == 105)
                     jjCheckNAddStates(138, 143);
                  break;
               case 128:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 117)
                     jjCheckNAddStates(144, 149);
                  break;
               case 137:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 79)
                     jjCheckNAdd(119);
                  break;
               case 140:
                  if (curChar == 98)
                     jjCheckNAdd(141);
                  break;
               case 142:
                  if (curChar == 95)
                     jjCheckNAdd(141);
                  break;
               case 143:
                  if (curChar == 105)
                     jjCheckNAddStates(150, 155);
                  break;
               case 150:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 117)
                     jjCheckNAddStates(156, 161);
                  break;
               case 159:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 66)
                     jjCheckNAdd(141);
                  break;
               case 164:
               case 165:
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(165);
                  break;
               case 169:
                  jjAddStates(40, 42);
                  break;
               case 175:
               case 176:
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(176);
                  break;
               case 178:
                  if (curChar == 98)
                     jjAddStates(97, 99);
                  break;
               case 180:
                  jjCheckNAdd(181);
                  break;
               case 182:
               case 183:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(183);
                  break;
               case 184:
                  if (curChar == 95)
                     jjCheckNAdd(185);
                  break;
               case 185:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(185);
                  break;
               case 186:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(181);
                  break;
               case 189:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 191:
                  jjCheckNAddStates(35, 37);
                  break;
               case 193:
               case 194:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(194);
                  break;
               case 195:
                  if (curChar == 95)
                     jjCheckNAdd(196);
                  break;
               case 196:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(196);
                  break;
               case 197:
                  if (curChar == 92)
                     jjAddStates(162, 163);
                  break;
               case 199:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 200:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 201:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 202:
                  if (curChar == 114)
                     jjAddStates(102, 103);
                  break;
               case 204:
                  jjAddStates(164, 165);
                  break;
               case 206:
               case 207:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(207);
                  break;
               case 208:
                  if (curChar == 95)
                     jjCheckNAdd(209);
                  break;
               case 209:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(209);
                  break;
               case 212:
                  jjAddStates(166, 167);
                  break;
               case 216:
                  jjAddStates(168, 169);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(104, 105);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 164:
               case 165:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(165);
                  break;
               case 169:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(40, 42);
                  break;
               case 175:
               case 176:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(176);
                  break;
               case 191:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(35, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 218 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   211, 215, 25, 28, 29, 28, 6, 8, 79, 64, 81, 83, 84, 85, 86, 93, 
   94, 163, 168, 177, 33, 36, 12, 14, 15, 62, 63, 38, 52, 96, 117, 118, 
   139, 140, 161, 191, 192, 197, 180, 189, 169, 171, 172, 164, 167, 66, 68, 72, 
   77, 66, 67, 68, 72, 71, 70, 72, 66, 67, 68, 72, 77, 79, 80, 64, 
   81, 82, 83, 84, 85, 86, 89, 88, 90, 81, 82, 83, 93, 79, 80, 64, 
   94, 98, 97, 99, 108, 120, 119, 121, 130, 142, 141, 143, 152, 182, 184, 193, 
   195, 179, 190, 202, 17, 24, 203, 210, 18, 19, 26, 27, 30, 31, 39, 41, 
   43, 45, 47, 51, 39, 53, 54, 55, 57, 60, 74, 76, 91, 92, 39, 100, 
   101, 102, 104, 107, 39, 109, 110, 111, 113, 116, 39, 122, 123, 124, 126, 129, 
   39, 131, 132, 133, 135, 138, 39, 144, 145, 146, 148, 151, 39, 153, 154, 155, 
   157, 160, 198, 199, 204, 205, 212, 213, 216, 217, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\141\163", "\142\162\145\141\153", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\143\162\141\164\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\162\156", "\146\141\154\163\145", 
"\146\156", "\146\157\162", "\151\146", "\151\155\160\154", "\151\156", "\154\145\164", 
"\154\157\157\160", "\155\141\164\143\150", "\155\157\144", "\155\157\166\145", "\155\165\164", 
"\160\165\142", "\162\145\146", "\162\145\164\165\162\156", "\163\145\154\146", 
"\123\145\154\146", "\163\164\141\164\151\143", "\163\164\162\165\143\164", 
"\163\165\160\145\162", "\164\162\141\151\164", "\164\162\165\145", "\164\171\160\145", 
"\165\156\163\141\146\145", "\165\163\145", "\167\150\145\162\145", "\167\150\151\154\145", 
"\141\163\171\156\143", "\141\167\141\151\164", "\144\171\156", "\141\142\163\164\162\141\143\164", 
"\142\145\143\157\155\145", "\142\157\170", "\144\157", "\146\151\156\141\154", "\155\141\143\162\157", 
"\157\166\145\162\162\151\144\145", "\160\162\151\166", "\164\171\160\145\157\146", 
"\165\156\163\151\172\145\144", "\166\151\162\164\165\141\154", "\171\151\145\154\144", "\53", "\55", "\52", 
"\57", "\45", "\136", "\41", "\46", "\174", "\46\46", "\174\174", "\74\74", "\76\76", 
"\53\75", "\55\75", "\52\75", "\57\75", "\136\75", "\46\75", "\174\75", "\74\74\75", 
"\76\76\75", "\75", "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\100", "\137", 
"\56", "\56\56", "\56\56\56", "\56\56\75", "\54", "\73", "\72", "\72\72", "\55\76", 
"\75\76", "\43", "\44", "\77", "\176", "\173", "\175", "\50", "\51", "\133", "\135", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffc0001L, 0x17fffffffffffffL, 0x1212acL, 
};
static final long[] jjtoSkip = {
   0x3ffeL, 0x3800000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x3800000000000000L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[218];
static private final int[] jjstateSet = new int[436];
static protected char curChar;
/** Constructor. */
public RustLexerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public RustLexerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 218; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
