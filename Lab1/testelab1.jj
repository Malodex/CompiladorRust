PARSER_BEGIN(RustLexer)
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

public class RustLexer {
    public static HashMap<Integer, String> tokenNames;

    public static void initializeTokenNames() {
        tokenNames = new HashMap<Integer, String>();
        Field[] fields = RustLexerConstants.class.getDeclaredFields();
        for (Field field : fields) {
            if (field.getType() == int.class) {
                try {
                    int value = field.getInt(null);
                    String name = field.getName();
                    tokenNames.put(value, name);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) throws ParseException, IOException {
        RustLexer parser = new RustLexer(System.in);
        initializeTokenNames();
        FileWriter writer = new FileWriter("saida_csharp_tokens.txt");

        while (true) {
            Token t = parser.getNextToken();
            if (t.kind == EOF) break;
            String tokenName = tokenNames.get(t.kind);
            String output = tokenName;
            System.out.println(output);
            writer.write(output + "\n");
        }
        writer.close();
    }

}

PARSER_END(RustLexer)
  
  
SKIP: {
    " " | "\t" | "\n" | "\r" | "U+000B" | "U+000C" | "U+000D" | "U+200E" |  "U+200F" | "U+0020"  | "U+2028" | "U+2029"| "U+0085"
}
TOKEN: {
    <#XID_Start: ["A"-"Z","a"-"z", "_"]>|
    <#XID_Continue: ["0"-"9","A"-"Z", "_","a"-"z"]>|
    <#SUFFIX: <IDENTIFIER_OR_KEYWORD>>|
    <#SUFFIX_NO_E : (~["e","E"])<SUFFIX>>
}

TOKEN : {
    
  //Palavra Reservada
	<KW_AS : "as"> |
	<KW_BREAK : "break"> |
	<KW_CONST : "const"> |
	<KW_CONTINUE : "continue"> |
	<KW_CRATE : "crate"> |
	<KW_ELSE : "else"> |
	<KW_ENUM : "enum"> |
	<KW_EXTERN : "extern"> |
	<KW_FALSE : "false"> |
	<KW_FN : "fn"> |
	<KW_FOR : "for"> |
	<KW_IF : "if"> |
	<KW_IMPL : "impl"> |
	<KW_IN : "in"> |
	<KW_LET : "let"> |
	<KW_LOOP : "loop"> |
	<KW_MATCH : "match"> |
	<KW_MOD : "mod"> |
	<KW_MOVE : "move"> |
	<KW_MUT : "mut"> |
	<KW_PUB : "pub"> |
	<KW_REF : "ref"> |
	<KW_RETURN : "return"> |
	<KW_SELFVALUE : "self"> |
	<KW_SELFTYPE : "Self"> |
	<KW_STATIC : "static"> |
	<KW_STRUCT : "struct"> |
	<KW_SUPER : "super"> |
	<KW_TRAIT : "trait"> |
	<KW_TRUE : "true"> |
	<KW_TYPE : "type"> |
	<KW_UNSAFE : "unsafe"> |
	<KW_USE : "use"> |
	<KW_WHERE : "where"> |
	<KW_WHILE : "while"> |
	<KW_ASYNC : "async"> |
	<KW_AWAIT : "await"> |
	<KW_DYN : "dyn"> |
	<KW_ABSTRACT : "abstract"> |
	<KW_BECOME : "become"> |
	<KW_BOX : "box"> |
	<KW_DO : "do"> |
	<KW_FINAL : "final"> |
	<KW_MACRO : "macro"> |
	<KW_OVERRIDE : "override"> |
	<KW_PRIV : "priv"> |
	<KW_TYPEOF : "typeof"> |
	<KW_UNSIZED : "unsized"> |
	<KW_VIRTUAL : "virtual"> |
	<KW_YIELD : "yield"> |

  //Pontuação
  <PLUS: "+">|
  <MINUS: "-">|
  <STAR: "*">|
  <SLASH: "/">|
  <PERCENT: "%">|
  <CARET: "^">|
  <NOT: "!">|
  <AND: "&">|
  <OR: "|">|
  <ANDAND: "&&">|
  <OROR: "||">|
  <SHL: "<<">|
  <SHR: ">>">|
  <PLUSEQ: "+=">|
  <MINUSEQ: "-=">|
  <STAREQ: "*=">|
  <SLASHEQ: "/=">|
  <CARETEQ: "^=">|
  <ANDEQ: "&=">|
  <OREQ: "|=">|
  <SHLEQ: "<<=">|
  <SHREQ: ">>=">|
  <EQ: "=">|
  <EQEQ: "==">|
  <NE: "!=">|
  <LT: "<">|
  <LE: "<=">|
  <GT: ">">|
  <GE: ">=">|
  <AT: "@">|
  <UNDERSCORE: "_">|
  <DOT: ".">|
  <DOTDOT: "..">|
  <DOTDOTDOT: "...">|
  <DOTDOTEQ: "..=">|
  <COMMA: ",">|
  <SEMI: ";">|
  <COLON: ":">|
  <PATHSEP: "::">|
  <RARROW: "->">|
  <FATARROW: "=>">|
  <POUND: "#">|
  <DOLLAR: "$">|
  <QUESTION: "?">|
  <TILDE: "~">|


  //Delimitadores
  <CURLYOPEN: "{">|
  <CURLYCLOSE: "}">|
  <PARENOPEN: "(">|
  <PARENCLOSE: ")">|
  <BRACKETOPEN: "[">|
  <BRACKETCLOSE: "]">
  }


TOKEN:{
    <#IDENTIFIER_OR_KEYWORD: <XID_Start>(<XID_Continue>)*|"_"(<XID_Continue>)+>|

    <IDENTIFIER: <IDENTIFIER_OR_KEYWORD>("!")?|<RAW_IDENTIFIER>>|

    <#RAW_IDENTIFIER: "r#"<IDENTIFIER_OR_KEYWORD>>|

    <#NON_KEYWORD_IDENTIFIER: <IDENTIFIER_OR_KEYWORD>>

}

 //Comentarios
  SPECIAL_TOKEN:{
  <LINE_COMMENT : "//"(~["/","!","\n"]|"//")(~["\n"])*>|
  < BLOCK_COMMENT: "/*" ( ~["*","!"] | "\r\n"|"**" )* "*/" >|
  <OUTER_LINE_DOC: "///" (~["/"](~["\n","\r"])*)?>|
  <#IsolatedCR: "\r"(~["\n"])>
  }


TOKEN:{
    <#BYTE_ESCAPE: "\\x"["0"-"9", "a"-"f", "A"-"F"]["0"-"9", "a"-"f", "A"-"F"]|["\n","\r","\t","\\","\0","\'","\""]>|
    <#STRING_CONTINUE : "\\\n">
}
  TOKEN:{
  <#SUF_INT : ( "i8" | "i16" | "i32" | "i64" | "i128" | "isize" |
           "u8" | "u16" | "u32" | "u64" | "u128" | "usize" )?>|
  //Tipos de variaveis


  <STRING: "\"" ( "\\" ~[] | ~["\\", "\""] )* "\"" > |
  <RAW_STRING_LITERAL: "r"<RAW_STRING_CONTENT>(<SUFFIX>)?>|

  <#RAW_STRING_CONTENT: "\""(~["\r","\n"])*"\""|"#"("\""(~["\r","\n"])*"\"")*"#"|"#"("\""(~["\r","\n"])*"\"")*"#">|

  <BYTE_LITERAL: "b'"(<ASCII>|<BYTE_ESCAPE>)"\'"(<SUFFIX>)?>| 
  <#ASCII_FOR_CHAR: (~["\'","\n","\r","\t","\\"])(["\u0000"-"\u007F"])>|
    
  <BYTE_STRING_LITERAL: "b\""(<ASCII_FOR_STRING>|<BYTE_ESCAPE>|<STRING_CONTINUE>)*"\""(<SUFFIX>)?>|
  <#ASCII_FOR_STRING: (~["\"","\\","\r","\n"])>
}
//Raw byte string
TOKEN:{
    <RAW_BYTE_STRING_LITERAL: "br"<RAW_BYTE_STRING_CONTENT>(<SUFFIX>)?>|
    <#ASCII: ["\u0000" - "\u007F"]>|
    <#RAW_BYTE_STRING_CONTENT:"\""(<ASCII>)*"\""|"#""\""(<ASCII>)*"\"""#"|"#""\""(<ASCII>)*"\"""#">|

  
    <CHAR: "'" ( "\\" ["n", "r", "t", "\\", "'", "0"] | ~["'", "\\"] ) "'"> |




  //INTEIRO
  < #DEC_INT :
         ( "0" | (["1"-"9"] (("_")? (["0"-"9"]))* ) )
         <SUF_INT>
    > | 
  < #HEX_INT :
         ( "0x" | "0X" )
         ( (["0"-"9", "a"-"f", "A"-"F"]) (("_")? (["0"-"9", "a"-"f", "A"-"F"]))* )
         <SUF_INT>
    > |
  < #OCT_INT :
         ( "0o" | "0O" )
         ( (["0"-"7"]) (("_")? (["0"-"7"]))* )
         <SUF_INT>
    > |
  < #BIN_INT :
         ( "0b" | "0B" )
         ( (["0"-"1"]) (("_")? (["0"-"1"]))* )
         <SUF_INT>
    > |
  <INTEGER : <DEC_INT> | <HEX_INT> | <OCT_INT> | <BIN_INT>> |



  //FLOAT
  < #FLOAT_DEC :(
  (((["0"-"9"])+ (("_")? ["0"-"9"]) * ) ? "." ((["0"-"9"])+ (("_")? ["0"-"9"])* )
  | ((["0"-"9"])+ (("_")? ["0"-"9"])* ) ".")
  (["e","E"](["+","-"])? (["0"-"9"] ((["_"])? ["0"-"9"])* ))?( "f32" | "f64" )?)>|

    < #FLOAT_EXP :
        (
            (["0"-"9"] ((["_"])? ["0"-"9"])* )
            ["e","E"]
            (["+","-"])? 
            (["0"-"9"] ((["_"])? ["0"-"9"])* )
            ("f32" | "f64")?
        )
    >|
    <FLOAT : <FLOAT_DEC>| <FLOAT_EXP>>
  }
