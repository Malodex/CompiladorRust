/* Generated By:JavaCC: Do not edit this line. RustLexerConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RustLexerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int XID_Start = 14;
  /** RegularExpression Id. */
  int XID_Continue = 15;
  /** RegularExpression Id. */
  int SUFFIX = 16;
  /** RegularExpression Id. */
  int SUFFIX_NO_E = 17;
  /** RegularExpression Id. */
  int KW_AS = 18;
  /** RegularExpression Id. */
  int KW_BREAK = 19;
  /** RegularExpression Id. */
  int KW_CONST = 20;
  /** RegularExpression Id. */
  int KW_CONTINUE = 21;
  /** RegularExpression Id. */
  int KW_CRATE = 22;
  /** RegularExpression Id. */
  int KW_ELSE = 23;
  /** RegularExpression Id. */
  int KW_ENUM = 24;
  /** RegularExpression Id. */
  int KW_EXTERN = 25;
  /** RegularExpression Id. */
  int KW_FALSE = 26;
  /** RegularExpression Id. */
  int KW_FN = 27;
  /** RegularExpression Id. */
  int KW_FOR = 28;
  /** RegularExpression Id. */
  int KW_IF = 29;
  /** RegularExpression Id. */
  int KW_IMPL = 30;
  /** RegularExpression Id. */
  int KW_IN = 31;
  /** RegularExpression Id. */
  int KW_LET = 32;
  /** RegularExpression Id. */
  int KW_LOOP = 33;
  /** RegularExpression Id. */
  int KW_MATCH = 34;
  /** RegularExpression Id. */
  int KW_MOD = 35;
  /** RegularExpression Id. */
  int KW_MOVE = 36;
  /** RegularExpression Id. */
  int KW_MUT = 37;
  /** RegularExpression Id. */
  int KW_PUB = 38;
  /** RegularExpression Id. */
  int KW_REF = 39;
  /** RegularExpression Id. */
  int KW_RETURN = 40;
  /** RegularExpression Id. */
  int KW_SELFVALUE = 41;
  /** RegularExpression Id. */
  int KW_SELFTYPE = 42;
  /** RegularExpression Id. */
  int KW_STATIC = 43;
  /** RegularExpression Id. */
  int KW_STRUCT = 44;
  /** RegularExpression Id. */
  int KW_SUPER = 45;
  /** RegularExpression Id. */
  int KW_TRAIT = 46;
  /** RegularExpression Id. */
  int KW_TRUE = 47;
  /** RegularExpression Id. */
  int KW_TYPE = 48;
  /** RegularExpression Id. */
  int KW_UNSAFE = 49;
  /** RegularExpression Id. */
  int KW_USE = 50;
  /** RegularExpression Id. */
  int KW_WHERE = 51;
  /** RegularExpression Id. */
  int KW_WHILE = 52;
  /** RegularExpression Id. */
  int KW_ASYNC = 53;
  /** RegularExpression Id. */
  int KW_AWAIT = 54;
  /** RegularExpression Id. */
  int KW_DYN = 55;
  /** RegularExpression Id. */
  int KW_ABSTRACT = 56;
  /** RegularExpression Id. */
  int KW_BECOME = 57;
  /** RegularExpression Id. */
  int KW_BOX = 58;
  /** RegularExpression Id. */
  int KW_DO = 59;
  /** RegularExpression Id. */
  int KW_FINAL = 60;
  /** RegularExpression Id. */
  int KW_MACRO = 61;
  /** RegularExpression Id. */
  int KW_OVERRIDE = 62;
  /** RegularExpression Id. */
  int KW_PRIV = 63;
  /** RegularExpression Id. */
  int KW_TYPEOF = 64;
  /** RegularExpression Id. */
  int KW_UNSIZED = 65;
  /** RegularExpression Id. */
  int KW_VIRTUAL = 66;
  /** RegularExpression Id. */
  int KW_YIELD = 67;
  /** RegularExpression Id. */
  int PLUS = 68;
  /** RegularExpression Id. */
  int MINUS = 69;
  /** RegularExpression Id. */
  int STAR = 70;
  /** RegularExpression Id. */
  int SLASH = 71;
  /** RegularExpression Id. */
  int PERCENT = 72;
  /** RegularExpression Id. */
  int CARET = 73;
  /** RegularExpression Id. */
  int NOT = 74;
  /** RegularExpression Id. */
  int AND = 75;
  /** RegularExpression Id. */
  int OR = 76;
  /** RegularExpression Id. */
  int ANDAND = 77;
  /** RegularExpression Id. */
  int OROR = 78;
  /** RegularExpression Id. */
  int SHL = 79;
  /** RegularExpression Id. */
  int SHR = 80;
  /** RegularExpression Id. */
  int PLUSEQ = 81;
  /** RegularExpression Id. */
  int MINUSEQ = 82;
  /** RegularExpression Id. */
  int STAREQ = 83;
  /** RegularExpression Id. */
  int SLASHEQ = 84;
  /** RegularExpression Id. */
  int CARETEQ = 85;
  /** RegularExpression Id. */
  int ANDEQ = 86;
  /** RegularExpression Id. */
  int OREQ = 87;
  /** RegularExpression Id. */
  int SHLEQ = 88;
  /** RegularExpression Id. */
  int SHREQ = 89;
  /** RegularExpression Id. */
  int EQ = 90;
  /** RegularExpression Id. */
  int EQEQ = 91;
  /** RegularExpression Id. */
  int NE = 92;
  /** RegularExpression Id. */
  int LT = 93;
  /** RegularExpression Id. */
  int LE = 94;
  /** RegularExpression Id. */
  int GT = 95;
  /** RegularExpression Id. */
  int GE = 96;
  /** RegularExpression Id. */
  int AT = 97;
  /** RegularExpression Id. */
  int UNDERSCORE = 98;
  /** RegularExpression Id. */
  int DOT = 99;
  /** RegularExpression Id. */
  int DOTDOT = 100;
  /** RegularExpression Id. */
  int DOTDOTDOT = 101;
  /** RegularExpression Id. */
  int DOTDOTEQ = 102;
  /** RegularExpression Id. */
  int COMMA = 103;
  /** RegularExpression Id. */
  int SEMI = 104;
  /** RegularExpression Id. */
  int COLON = 105;
  /** RegularExpression Id. */
  int PATHSEP = 106;
  /** RegularExpression Id. */
  int RARROW = 107;
  /** RegularExpression Id. */
  int FATARROW = 108;
  /** RegularExpression Id. */
  int POUND = 109;
  /** RegularExpression Id. */
  int DOLLAR = 110;
  /** RegularExpression Id. */
  int QUESTION = 111;
  /** RegularExpression Id. */
  int TILDE = 112;
  /** RegularExpression Id. */
  int CURLYOPEN = 113;
  /** RegularExpression Id. */
  int CURLYCLOSE = 114;
  /** RegularExpression Id. */
  int PARENOPEN = 115;
  /** RegularExpression Id. */
  int PARENCLOSE = 116;
  /** RegularExpression Id. */
  int BRACKETOPEN = 117;
  /** RegularExpression Id. */
  int BRACKETCLOSE = 118;
  /** RegularExpression Id. */
  int IDENTIFIER_OR_KEYWORD = 119;
  /** RegularExpression Id. */
  int IDENTIFIER = 120;
  /** RegularExpression Id. */
  int RAW_IDENTIFIER = 121;
  /** RegularExpression Id. */
  int NON_KEYWORD_IDENTIFIER = 122;
  /** RegularExpression Id. */
  int LINE_COMMENT = 123;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 124;
  /** RegularExpression Id. */
  int OUTER_LINE_DOC = 125;
  /** RegularExpression Id. */
  int IsolatedCR = 126;
  /** RegularExpression Id. */
  int BYTE_ESCAPE = 127;
  /** RegularExpression Id. */
  int STRING_CONTINUE = 128;
  /** RegularExpression Id. */
  int SUF_INT = 129;
  /** RegularExpression Id. */
  int STRING = 130;
  /** RegularExpression Id. */
  int RAW_STRING_LITERAL = 131;
  /** RegularExpression Id. */
  int RAW_STRING_CONTENT = 132;
  /** RegularExpression Id. */
  int BYTE_LITERAL = 133;
  /** RegularExpression Id. */
  int ASCII_FOR_CHAR = 134;
  /** RegularExpression Id. */
  int BYTE_STRING_LITERAL = 135;
  /** RegularExpression Id. */
  int ASCII_FOR_STRING = 136;
  /** RegularExpression Id. */
  int RAW_BYTE_STRING_LITERAL = 137;
  /** RegularExpression Id. */
  int ASCII = 138;
  /** RegularExpression Id. */
  int RAW_BYTE_STRING_CONTENT = 139;
  /** RegularExpression Id. */
  int CHAR = 140;
  /** RegularExpression Id. */
  int DEC_INT = 141;
  /** RegularExpression Id. */
  int HEX_INT = 142;
  /** RegularExpression Id. */
  int OCT_INT = 143;
  /** RegularExpression Id. */
  int BIN_INT = 144;
  /** RegularExpression Id. */
  int INTEGER = 145;
  /** RegularExpression Id. */
  int FLOAT_DEC = 146;
  /** RegularExpression Id. */
  int FLOAT_EXP = 147;
  /** RegularExpression Id. */
  int FLOAT = 148;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"U+000B\"",
    "\"U+000C\"",
    "\"U+000D\"",
    "\"U+200E\"",
    "\"U+200F\"",
    "\"U+0020\"",
    "\"U+2028\"",
    "\"U+2029\"",
    "\"U+0085\"",
    "<XID_Start>",
    "<XID_Continue>",
    "<SUFFIX>",
    "<SUFFIX_NO_E>",
    "\"as\"",
    "\"break\"",
    "\"const\"",
    "\"continue\"",
    "\"crate\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"false\"",
    "\"fn\"",
    "\"for\"",
    "\"if\"",
    "\"impl\"",
    "\"in\"",
    "\"let\"",
    "\"loop\"",
    "\"match\"",
    "\"mod\"",
    "\"move\"",
    "\"mut\"",
    "\"pub\"",
    "\"ref\"",
    "\"return\"",
    "\"self\"",
    "\"Self\"",
    "\"static\"",
    "\"struct\"",
    "\"super\"",
    "\"trait\"",
    "\"true\"",
    "\"type\"",
    "\"unsafe\"",
    "\"use\"",
    "\"where\"",
    "\"while\"",
    "\"async\"",
    "\"await\"",
    "\"dyn\"",
    "\"abstract\"",
    "\"become\"",
    "\"box\"",
    "\"do\"",
    "\"final\"",
    "\"macro\"",
    "\"override\"",
    "\"priv\"",
    "\"typeof\"",
    "\"unsized\"",
    "\"virtual\"",
    "\"yield\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"||\"",
    "\"<<\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"^=\"",
    "\"&=\"",
    "\"|=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"@\"",
    "\"_\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"..=\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"::\"",
    "\"->\"",
    "\"=>\"",
    "\"#\"",
    "\"$\"",
    "\"?\"",
    "\"~\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "<IDENTIFIER_OR_KEYWORD>",
    "<IDENTIFIER>",
    "<RAW_IDENTIFIER>",
    "<NON_KEYWORD_IDENTIFIER>",
    "<LINE_COMMENT>",
    "<BLOCK_COMMENT>",
    "<OUTER_LINE_DOC>",
    "<IsolatedCR>",
    "<BYTE_ESCAPE>",
    "\"\\\\\\n\"",
    "<SUF_INT>",
    "<STRING>",
    "<RAW_STRING_LITERAL>",
    "<RAW_STRING_CONTENT>",
    "<BYTE_LITERAL>",
    "<ASCII_FOR_CHAR>",
    "<BYTE_STRING_LITERAL>",
    "<ASCII_FOR_STRING>",
    "<RAW_BYTE_STRING_LITERAL>",
    "<ASCII>",
    "<RAW_BYTE_STRING_CONTENT>",
    "<CHAR>",
    "<DEC_INT>",
    "<HEX_INT>",
    "<OCT_INT>",
    "<BIN_INT>",
    "<INTEGER>",
    "<FLOAT_DEC>",
    "<FLOAT_EXP>",
    "<FLOAT>",
  };

}
