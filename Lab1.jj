options {
    IGNORE_CASE = true;
    //DEBUG_TOKEN_MANAGER = true;
  }
PARSER_BEGIN(RustLexer)

public class RustLexer {
    public static void main(String args[]) {
        RustLexer parser;

        if (args.length == 0) {
            parser = new RustLexer(System.in);
        } else {
            try {
                parser = new RustLexer(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("Error: The file " + args[0] + " was not found.");
                return;
            }
        }
        try {
            parser.enable_tracing();
            parser.Start();
        } catch (ParseException e) {
            System.out.println("Error: There was an error during the parse.");
            System.out.println(e.getMessage());
        } catch (TokenMgrError e) {
            System.out.println("Error: There was an error.");
            System.out.println(e.getMessage());
        }
    }
}

PARSER_END(RustLexer)
  
  TOKEN_MGR_DECLS : {
    // Declarações adicionais para o gerenciador de tokens, se necessário
  }
  
SKIP: {
    " " | "\t" | "\n" | "\r" | "U+000B" | "U+000C" | "U+000D" | "U+200E" |  "U+200F" | "U+0020"  | "U+2028" | "U+2029"| "U+0085"
}
  
  TOKEN : {
    <LET: "let"> |
    <MUT: "mut"> |
    <FN: "fn"> |
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*> |
    <NUMBER: ["0"-"9"] (["0"-"9"])*>
  }
  
  TOKEN : {
    <PLUS: "+"> |
    <MINUS: "-"> |
    <STAR: "*"> |
    <SLASH: "/"> |
    <EQ: "="> |
    <SEMI: ";">
  }
  
